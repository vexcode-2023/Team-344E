{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor FrontLeftMotor = motor(PORT1, ratio6_1, true);\n\nmotor BackLeftMotor = motor(PORT2, ratio6_1, true);\n\nmotor MiddleLeftMotor = motor(PORT3, ratio6_1, false);\n\nmotor FrontRightMotor = motor(PORT4, ratio6_1, false);\n\nmotor BackRightMotor = motor(PORT5, ratio6_1, false);\n\nmotor MiddleRightMotor = motor(PORT6, ratio6_1, true);\n\nmotor Intake = motor(PORT7, ratio18_1, false);\n\ninertial InertialSensor = inertial(PORT8);\n\ndigital_out ArmPneu = digital_out(Brain.ThreeWirePort.A);\ndigital_out RatchetPneu = digital_out(Brain.ThreeWirePort.B);\ndigital_out TipPneu = digital_out(Brain.ThreeWirePort.C);\nmotor slapper = motor(PORT9, ratio18_1, false);\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control Intake\n      if (Controller1.ButtonL1.pressing()) {\n        Intake.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Intake.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Intake.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control slapper\n      if (Controller1.ButtonR1.pressing()) {\n        slapper.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        slapper.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        slapper.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project: 344E States Code                                              \n//    Author: Henry R\n//    Created: 2/28/2024\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n\n// Includes\n#include \"vex.h\"\n#include <string>  \n#include <cmath>\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\n\n// ----------------------------------------------------------------------------\n//                                VARIABLE SETUPS\n// ----------------------------------------------------------------------------\n\nbool xstate;\nbool ystate;\nbool bstate;\n\n// ----------------------------------------------------------------------------\n//                               FUNCTION SETUPS\n// ----------------------------------------------------------------------------\n\n\nvoid XPress() {\n  xstate = !xstate;\n  if (xstate) {\n    ArmPneu.set(true);\n  } else {\n    ArmPneu.set(false);\n  }\n}\n\nvoid YPress(){\n  ystate = !ystate;\n  if (ystate) {\n    RatchetPneu.set(true);\n    ArmPneu.set(false);\n  } else {\n    RatchetPneu.set(false);\n  }\n} \n\nvoid BPress(){\n  bstate = !bstate;\n  if(bstate) {\n    TipPneu.set(true);\n  } else {\n    TipPneu.set(false);\n  }\n}\n\n// auton selector \nint autonToRun = 0;\n\n// button class - draws buttons and detects clicks\nclass Button\n{\n  public:\n    int x, y, width, height;\n    std::string text;\n    color buttonColor, textColor;\n    \n    Button(int x, int y, int width, int height, std::string text, color buttonColor, color textColor)\n    : x(x), y(y), width(width), height(height), text(text), buttonColor(buttonColor), textColor(textColor){}\n\n    void render()\n    {\n      Brain.Screen.drawRectangle(x, y, width, height, buttonColor);\n      Brain.Screen.printAt(x + 15, y + 30, false, text.c_str());\n    }\n\n    bool isClicked()\n    {\n      if(Brain.Screen.pressing() && Brain.Screen.xPosition() >= x && Brain.Screen.xPosition() <= x + width &&\n      Brain.Screen.yPosition() >= y && Brain.Screen.yPosition() <= y + width) return true;\n      return false;\n    }\n};\n\n// configures buttons\nButton autonButtons[] = {\n  Button(10, 10, 150, 50, \"DO NOT DO\", red, red),\n  Button(170, 10, 150, 50, \"Right Main\", white, black),\n  Button(10, 70, 150, 50, \"DO NOT DO\", red, red),\n  Button(170, 70, 150, 50, \"Left Main\", white, black)\n};\n\n// Driving and turning functions\n\nvoid driveForward(double Distance /* distance in inches divided by wheel circ (10.2102)*/ ) {\n  FrontLeftMotor.spinFor(forward, Distance/10.2102, turns, false);\n  BackLeftMotor.spinFor(forward, Distance/10.2102, turns, false);\n  MiddleLeftMotor.spinFor(forward, Distance/10.2102, turns, false);\n  FrontRightMotor.spinFor(forward, Distance/10.2102, turns, false);\n  BackRightMotor.spinFor(forward, Distance/10.2102, turns, false);\n  MiddleRightMotor.spinFor(forward, Distance/10.2102, turns);\n\n  // waits to return until all motors are stopped moving\n  while(FrontLeftMotor.isSpinning() || BackLeftMotor.isSpinning() || MiddleLeftMotor.isSpinning() || \n          FrontRightMotor.isSpinning() || BackRightMotor.isSpinning() || MiddleRightMotor.isSpinning()) {\n        wait(10, msec);\n    }\n}\n\nvoid driveReverse(double Distance /* distance in inches divided by wheel circ (10.2102)*/ ) {\n  FrontLeftMotor.spinFor(reverse, Distance/10.2102, turns, false);\n  BackLeftMotor.spinFor(reverse, Distance/10.2102, turns, false);\n  MiddleLeftMotor.spinFor(reverse, Distance/10.2102, turns, false);\n  FrontRightMotor.spinFor(reverse, Distance/10.2102, turns, false);\n  BackRightMotor.spinFor(reverse, Distance/10.2102, turns, false);\n  MiddleRightMotor.spinFor(reverse, Distance/10.2102, turns);\n\n  // waits to return until all motors are stopped moving\n  while(FrontLeftMotor.isSpinning() || BackLeftMotor.isSpinning() || MiddleLeftMotor.isSpinning() || \n          FrontRightMotor.isSpinning() || BackRightMotor.isSpinning() || MiddleRightMotor.isSpinning()) {\n        wait(10, msec);\n    }\n}\n\nvoid turnLeft(double Degrees) {\n    // Calculate the distance each wheel needs to travel to turn left by the specified number of degrees\n    double wheelCircumference = 10.2102; // Wheel circumference in inches\n    double distance = (wheelCircumference * Degrees) / 360; // Calculate the distance traveled by each wheel\n\n    // Spin motors for left turn\n    FrontLeftMotor.spinFor(reverse, distance, turns, false);\n    BackLeftMotor.spinFor(reverse, distance, turns, false);\n    MiddleLeftMotor.spinFor(reverse, distance, turns, false);\n    FrontRightMotor.spinFor(forward, distance, turns, false);\n    BackRightMotor.spinFor(forward, distance, turns, false);\n    MiddleRightMotor.spinFor(forward, distance, turns, true);\n}\n\nvoid turnRight(double Degrees) {\n    // Calculate the distance each wheel needs to travel to turn right by the specified number of degrees\n    double wheelCircumference = 10.2102; // Wheel circumference in inches\n    double distance = (wheelCircumference * Degrees) / 360; // Calculate the distance traveled by each wheel\n\n    // Spin motors for right turn\n    FrontLeftMotor.spinFor(forward, distance, turns, false);\n    BackLeftMotor.spinFor(forward, distance, turns, false);\n    MiddleLeftMotor.spinFor(forward, distance, turns, false);\n    FrontRightMotor.spinFor(reverse, distance, turns, false);\n    BackRightMotor.spinFor(reverse, distance, turns, false);\n    MiddleRightMotor.spinFor(reverse, distance, turns, true);\n}\n\n\n\nbool INtake;\nint intakee() {\n  \n  INtake = true;\n  if (INtake){\n   Intake.spinFor(forward, 10, turns, true); \n  }\n  INtake = false;\n  return 0;\n}\n\n\n\n// ----------------------------------------------------------------------------\n//                        COMPETITION FUNCTIONS & CODE\n// ----------------------------------------------------------------------------\n\n\n\n\n// ------------\n//    AUTON\n// ------------\nvoid autonomous()\n{\n    if(autonToRun == 0) // right rush\n    {\n      Brain.Screen.clearScreen();\n      Brain.Screen.drawImageFromFile(\"brainbanner.png\", 0, 0);\n      task intakeTask = task(intakee);\n      driveForward(72); // drive to middle triball\n      FrontLeftMotor.setVelocity(25, percent);\n      BackLeftMotor.setVelocity(25, percent);\n      MiddleLeftMotor.setVelocity(25, percent);\n      FrontRightMotor.setVelocity(25, percent);\n      BackRightMotor.setVelocity(25, percent);\n      MiddleRightMotor.setVelocity(25, percent);\n      driveForward(12);\n      FrontLeftMotor.setVelocity(75, percent);\n      BackLeftMotor.setVelocity(75, percent);\n      MiddleLeftMotor.setVelocity(75, percent);\n      FrontRightMotor.setVelocity(75, percent);\n      BackRightMotor.setVelocity(75, percent);\n      MiddleRightMotor.setVelocity(75, percent);\n      turnRight(75);\n      driveForward(40); // drive to goal and deposit triball\n      // turnRight(45); // turn to triball on barrier\n      // driveForward(49.4772); // drive to triball\n      // Intake.spinFor(forward, 10, turns, true); // intake triball\n      // turnLeft(180); // turn around\n      // driveForward(49.4772); // go to goal and deposit triball\n    }\n\n    if(autonToRun == 1) // right main\n    {\n      Brain.Screen.clearScreen();\n      Brain.Screen.drawImageFromFile(\"brainbanner.png\", 0, 0);\n      FrontLeftMotor.setStopping(coast);\n      BackLeftMotor.setStopping(coast);\n      MiddleLeftMotor.setStopping(coast);\n      FrontRightMotor.setStopping(coast);\n      BackRightMotor.setStopping(coast);\n      MiddleRightMotor.setStopping(coast);\n    //  driveVelocity(100); // set drive speed to 100%\n      driveForward(77); // drive to mid field/goal\n      turnRight(60); // turn to goal\n      driveForward(30); // drive to deposit\n      driveReverse(20);\n      // turnRight(110); // turn around to triball at barrier\n      // driveForward(65); // drive to triball\n      // Intake.spinFor(forward, 3, turns);\n      // turnRight(180); // turn around\n      // driveForward(62); // go to goal and deposit triball\n      // driveReverse(30);\n    }\n\n    if(autonToRun == 2)\n    {\n      Brain.Screen.clearScreen();\n      Brain.Screen.drawImageFromFile(\"brainbanner.png\", 0, 0);\n     // driveVelocity(100); // set drive speed to 100%\n      driveForward(53.666); // drive to middle triball\n      Intake.spinFor(forward, 10, turns, true); // intake triball\n      turnLeft(45); // turn towards goal\n      driveForward(24); // drive to goal and deposit triball\n      turnLeft(45); // turn to triball on barrier\n      driveForward(49.4772); // drive to triball\n      Intake.spinFor(forward, 10, turns, true); // intake triball\n      turnRight(180); // turn around\n      driveForward(49.4772); // go to goal and deposit triball\n    }\n\n    if(autonToRun == 2)\n    {\n      Brain.Screen.clearScreen();\n      Brain.Screen.drawImageFromFile(\"brainbanner.png\", 0, 0);\n      FrontLeftMotor.setStopping(coast);\n      BackLeftMotor.setStopping(coast);\n      MiddleLeftMotor.setStopping(coast);\n      FrontRightMotor.setStopping(coast);\n      BackRightMotor.setStopping(coast);\n      MiddleRightMotor.setStopping(coast);\n    //  driveVelocity(100); // set drive speed to 100%\n      driveForward(77); // drive to mid field/goal\n      turnRight(60); // turn to goal\n      driveForward(18); // drive to deposit\n      wait (1, seconds);\n      driveReverse(30);\n      wait(2, seconds);\n      turnRight(1509); // turn around to triball at barrier\n      driveForward(63); // drive to triball\n      Intake.spinFor(forward, 3, turns);\n      turnRight(155); // turn around\n      driveForward(60); // go to goal and deposit triball\n      driveReverse(30);\n    }\n\n}\n\n// ------------\n//    DRIVER\n// ------------\nvoid userControl(void) {\n\n  // Show team banner\n  Brain.Screen.drawImageFromFile(\"brainbanner.png\", 0, 0);\n\n  // pneumatics toggles arm \n  Controller1.ButtonX.pressed(XPress);\n  // pneumatics toggles ratchets\n  Controller1.ButtonY.pressed(YPress);\n  // pneumatic toggle anti tip\n  Controller1.ButtonA.pressed(BPress);\n  \n// Driving code\n  while (true) {\n        // x₁ = Left Motor X = [Controller] [3] position + [Controller] [1] position\n        // x₂ = Right Motor X = [Controller] [3] position - [Controller] [1] position\n        // Sets each motor's velocity to 0.0001x³ (shown as 0.0001 * x * x * x)\n        FrontLeftMotor.setVelocity((0.0001 * (((Controller1.Axis3.position() + Controller1.Axis1.position()) * (Controller1.Axis3.position() + Controller1.Axis1.position())) * (Controller1.Axis3.position() + Controller1.Axis1.position()))), percent);\n        BackLeftMotor.setVelocity((0.0001 * (((Controller1.Axis3.position() + Controller1.Axis1.position()) * (Controller1.Axis3.position() + Controller1.Axis1.position())) * (Controller1.Axis3.position() + Controller1.Axis1.position()))), percent);\n        MiddleLeftMotor.setVelocity((0.0001 * (((Controller1.Axis3.position() + Controller1.Axis1.position()) * (Controller1.Axis3.position() + Controller1.Axis1.position())) * (Controller1.Axis3.position() + Controller1.Axis1.position()))), percent);\n        FrontRightMotor.setVelocity((0.0001 * (((Controller1.Axis3.position() - Controller1.Axis1.position()) * (Controller1.Axis3.position() - Controller1.Axis1.position())) * (Controller1.Axis3.position() - Controller1.Axis1.position()))), percent);\n        BackRightMotor.setVelocity((0.0001 * (((Controller1.Axis3.position() - Controller1.Axis1.position()) * (Controller1.Axis3.position() - Controller1.Axis1.position())) * (Controller1.Axis3.position() - Controller1.Axis1.position()))), percent);\n        MiddleRightMotor.setVelocity((0.0001 * (((Controller1.Axis3.position() - Controller1.Axis1.position()) * (Controller1.Axis3.position() - Controller1.Axis1.position())) * (Controller1.Axis3.position() - Controller1.Axis1.position()))), percent);\n        // Spins motor according to the velocity set\n        FrontLeftMotor.spin(forward);\n        BackLeftMotor.spin(forward);\n        MiddleLeftMotor.spin(forward);\n        FrontRightMotor.spin(forward);\n        BackRightMotor.spin(forward);\n        MiddleRightMotor.spin(forward);\n\n    wait(20, msec);\n  }\n}\n\nint main()\n{\n  Intake.setVelocity(100, percent);\n  slapper.setVelocity(25, percent);\n  FrontLeftMotor.setVelocity(75, percent);\n  BackLeftMotor.setVelocity(75, percent);\n  MiddleLeftMotor.setVelocity(75, percent);\n  FrontRightMotor.setVelocity(75, percent);\n  BackRightMotor.setVelocity(75, percent);\n  MiddleRightMotor.setVelocity(75, percent);\n  FrontLeftMotor.setStopping(coast);\n  BackLeftMotor.setStopping(coast);\n  MiddleLeftMotor.setStopping(coast);\n  FrontRightMotor.setStopping(coast);\n  BackRightMotor.setStopping(coast);\n  MiddleRightMotor.setStopping(coast);\n  Intake.setStopping(coast);\n\n  competition Competition;\n\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  while(true)\n  {\n    \n\n    if(!Competition.isEnabled())\n    {\n      Brain.Screen.clearScreen(white);\n      for(int i = 0; i < 4; i++)\n      {\n        autonButtons[i].render();\n        if(autonButtons[i].isClicked())\n        {\n          autonButtons[autonToRun].buttonColor = white;\n          autonButtons[i].buttonColor = green;\n          autonToRun = i;\n        }\n      }\n    }\n\n    Brain.Screen.render();\n    vex::task::sleep(7);\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Intake","leftDir":"false","right":"slapper","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"FrontLeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"BackLeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"MiddleLeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4],"name":"FrontRightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[5],"name":"BackRightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[6],"name":"MiddleRightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[7],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"InertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"ArmPneu","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"RatchetPneu","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3],"name":"TipPneu","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[9],"name":"slapper","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}}],"slot":0,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}